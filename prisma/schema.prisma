generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model auth_accounts {
  id              Int            @id(map: "PK_microsoft_users") @default(autoincrement())
  microsoft_email String         @unique(map: "UK_microsoft_email") @db.VarChar(320)
  microsoft_id    String?        @db.VarChar(50)
  is_admin        Boolean        @default(false, map: "DF_auth_users_is_admin")
  main_members    main_members[]
}

model main_members {
  id                    Int                    @id(map: "main_Members$PrimaryKey") @default(autoincrement())
  user_id               Int?
  first_name            String?                @db.NVarChar(255)
  last_name             String?                @db.NVarChar(255)
  business_name         String?                @db.NVarChar(255)
  date_joined           DateTime?
  email                 String?                @db.NVarChar(255)
  address               String?                @db.NVarChar(255)
  city                  String?                @db.NVarChar(255)
  province              String?                @db.NVarChar(255)
  country               String?                @db.NVarChar(255)
  postal_code           String?                @db.NVarChar(255)
  business_phone        String?                @db.NVarChar(255)
  mobile_phone          String?                @db.NVarChar(255)
  category              Int?
  keywords_EN           String?                @db.NVarChar(Max)
  keywords_FR           String?                @db.NVarChar(Max)
  problems_EN           String?                @db.NVarChar(Max)
  problems_FR           String?                @db.NVarChar(Max)
  dream                 String?                @db.NVarChar(Max)
  notes                 String?                @db.NVarChar(Max)
  how_can_we_help       String?                @db.NVarChar(Max)
  faculty               Int?
  auth_accounts         auth_accounts?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_main_members_auth_users")
  types_faculty         types_faculty?         @relation(fields: [faculty], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "main_Members$types_Facultymain_Members")
  types_member_category types_member_category? @relation(fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "main_Members$types_memberCatmain_Members")

  @@index([postal_code], map: "main_Members$postalCode")
}

model types_faculty {
  id           Int            @id(map: "types_Faculty$PrimaryKey") @default(autoincrement())
  name_en      String?        @db.NVarChar(255)
  name_fr      String?        @db.NVarChar(255)
  main_members main_members[]
}

model types_member_category {
  id           Int            @id(map: "types_memberCat$PrimaryKey") @default(autoincrement())
  cat_en       String?        @db.NVarChar(255)
  cat_fr       String?        @db.NVarChar(255)
  main_members main_members[]
}
